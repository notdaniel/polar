// Generated by CoffeeScript 1.8.0
(function() {
  var cookieParser, express, metaserve, setup, utils,
    __slice = [].slice;

  express = require('express');

  metaserve = require('metaserve');

  cookieParser = require('polar-cookieParser');

  utils = require('./utils');

  setup = function() {
    var RedisStore, app, config, configs, middleware, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
    configs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = utils.merge_all(configs);
    app = config.app || express();
    if (config.app) {
      app = config.app;
      delete config.app;
    }
    app.config = config;
    app.set('views', config.view_dir || './views');
    app.set('view engine', config.view_engine || 'jade');
    app.use(function(req, res, next) {
      console.log("[" + (new Date().toISOString()) + "] " + req.method + " " + req.url);
      return next();
    });
    if (!config.no_cookie_parser) {
      app.use(cookieParser(null, (_ref = config.session) != null ? _ref.cookie : void 0));
    }
    if (!config.no_body_parser) {
      app.use(express.bodyParser());
    }
    if (config.session != null) {
      RedisStore = require('connect-redis')(express);
      app.use(express.session(utils.merge_objs({
        key: "sid:" + (((_ref1 = config.session.cookie) != null ? _ref1.domain : void 0) || "*"),
        store: new RedisStore({
          host: ((_ref2 = config.redis) != null ? _ref2.host : void 0) || 'localhost'
        }),
        cookie: {
          maxAge: 1000 * 60 * 60 * 24 * 30 * 3
        }
      }, config.session)));
    }
    if (config.middleware != null) {
      _ref3 = config.middleware;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        middleware = _ref3[_i];
        app.use(middleware);
      }
    }
    app.use(app.router);
    app.use(metaserve(config.metaserve || config.static_dir || {
      compilers: {
        css: [
          !config.debug ? require('metaserve-bouncer')({
            ext: 'bounced.css'
          }) : void 0, require('metaserve-css-styl')()
        ],
        js: [
          !config.debug ? require('metaserve-bouncer')({
            ext: 'bounced.js'
          }) : void 0, require('metaserve-js-coffee-reactify')()
        ]
      }
    }));
    if ((_ref4 = config.using) != null) {
      _ref4.map(function(using) {
        return app.use(using);
      });
    }
    app.use(config.fallback || function(req, res, next) {
      return res.send(404, "Could not find page.");
    });
    app.start = function() {
      return app.listen(config.port, function() {
        return console.log("Listening on :" + config.port);
      });
    };
    return app;
  };

  module.exports = setup;

}).call(this);
